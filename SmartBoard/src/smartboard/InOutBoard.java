/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package smartboard;

import MinTFramework.MinT;
import java.awt.Cursor;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import jdk.nashorn.internal.objects.NativeRegExp;

/**
 *
 * @author Shin
 */
public class InOutBoard extends JFrame {

    static InOutBoard inoutboard;
    //protected MainPanel p1 = new MainPanel(this);
    protected MainPanelManualConfiguired p1 = new MainPanelManualConfiguired(this);
    public ArrayList<Researcherinfo> researcherinfolist = new ArrayList<>();
    public ArrayList<StudentInfo> studentinfolist = new ArrayList<>();
    public ArrayList<Lectureinfo> lectureinfolist = new ArrayList<>();
    public ArrayList<Purposeinfo> purposeinfolist = new ArrayList<>();
    public ArrayList<MessageBox> messageboxlist = new ArrayList<>();
    public ArrayList<Timetableinfo> timetablelist = new ArrayList<>();
    public ArrayList<CurrentStateinfo> currentstatelist = new ArrayList<>();
    public JButton[] button;
   
    private GraphicsDevice device;
    DBconnector db;

    /**
     * Creates new form NewJFrame
     */
    public InOutBoard() {
        this.inoutboard = this;
        initComponents();
        databaseInit();
//        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
//        device = ge.getDefaultScreenDevice();
//        device.setFullScreenWindow(this);
        this.setVisible(true);
        this.setSize(800, 480);
        this.getContentPane().removeAll();

//        JPanel p = new JPanel(new GridLayout(3, 3, 3, 3));
//        p.setSize(800, 480);
//        javax.swing.JButton bt[] = new JButton[8];
//        for (int i = 0; i < 8; i++) {
//            bt[i] = new JButton(i + " Button");
//            //p.add(bt[i]);
//        }

        //this.getContentPane().add(p);
        this.getContentPane().add(p1);
        this.revalidate();
        this.repaint();

    }

    public static InOutBoard getInstance() {
        return inoutboard;
    }

    public synchronized ArrayList<StudentInfo> getStudentList() {
        return this.studentinfolist;
    }

    public synchronized ArrayList<Lectureinfo> getLectureInfoList() {
        return this.lectureinfolist;
    }
    public void buttonSetText(int rid,String text){
       p1.buttonSetText(rid, text);
    }
    public boolean updateMSGcheck(int msgid) {
        boolean ok = db.updateMSGcheck(msgid);
        if (ok) {
            for (MessageBox tmp : messageboxlist) {
                if (tmp.msgid == msgid) {
                    tmp.setMsgcheck(1);
                }
                
            }
        }
        return ok;
    }

    public boolean updateCurrentState(int rid,int csid) {
        boolean ok = db.updateCurrentState(rid,csid);
        if (ok) {
            for (Researcherinfo rinfo : researcherinfolist) {
                if(rinfo.rid==rid) {
                    rinfo.setStateid(csid);
                }
            }
        }
        return ok;
    }

    private void databaseInit() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                db = new DBconnector();
                researcherinfolist = db.getResearcherInfo();
                studentinfolist = db.getStudentInfo();
                lectureinfolist = db.getLectureList();
                purposeinfolist = db.getPurposeinfo();
                messageboxlist = db.getMessageBoxinfo();
                timetablelist = db.getTimetableInfo();
                currentstatelist = db.getCurrentstateinfo();
                // System.out.println(researcherinfolist);
            }
        }).start();
    }

    public void refleshAllList() {
        databaseInit();
    }
 

    public void changePanel(JPanel p) {

        this.getContentPane().removeAll();
        this.getContentPane().add(p);
        this.revalidate();
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 727, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 472, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InOutBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InOutBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InOutBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InOutBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                InOutBoard iob = new InOutBoard();
                ServerMinT smint = new ServerMinT();

                smint.Start();
                Toolkit tk = Toolkit.getDefaultToolkit();
                Cursor invisCursor = tk.createCustomCursor(tk.createImage(""), new Point(), null);
//                iob.setCursor(invisCursor);
//                iob.getGlassPane().setVisible(true);
//                iob.setUndecorated(true);
//                iob.setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
